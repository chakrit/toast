<#@ template language="C#" hostspecific="true" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#
  var folder = Host.ResolvePath(".");
  var viewsFolder = Path.GetFullPath(Path.Combine(folder, @"Content\haml"));
  
  var views = Directory.GetFiles(viewsFolder, "*.haml");
  var infos = new ViewInfo[views.Length];

  // find out information of all pages
  for (var i = 0; i < views.Length; i++) {
    var filename = Path.GetFileName(views[i]);

    infos[i].Filename = filename;

    var pageName = Path.GetFileNameWithoutExtension(filename);
    var temp = pageName.Split('.');

    if (temp.Length == 1) {
      infos[i].Layout = null;
      infos[i].Page = temp[0];

    } else {
      infos[i].Layout = temp[0];
      infos[i].Page = temp[1];
    }

  }

  // find out all the layouts
  var layouts = new Dictionary<string, List<ViewInfo>>();

  for (var i = 0; i < infos.Length; i++) {
    var layout = infos[i].Layout;

    if (!string.IsNullOrEmpty(layout))
    {
      if (!layouts.ContainsKey(layout))
        layouts[layout] = new List<ViewInfo>();
      
      layouts[layout].Add(infos[i]);
    }
  }

#>

// AUTOGENERATED - from ToastPages.tt on <#= DateTime.Now #>

using NToast.Web.Tokens;

namespace NToast.Web
{
  public static class ToastPages
  {
<# foreach (var key in layouts.Keys) { #>

    private static <#= key #>Layout _layout<#= key #> = new <#= key #>Layout();

    public static <#= key #>Layout <#= key #> { get { return _layout<#= key #>; } }

    public class <#= key #>Layout
    {
      protected internal <#= key #>Layout() { }

<#  foreach (var info in layouts[key]) { #>
      public ToastPage <#= info.Page #>()
      {
        return new ToastPage("<#= info.Layout #>.<#= info.Page #>");
      }

      public ToastPage<TToken> <#= info.Page #><TToken>(TToken token)
        where TToken : Token
      {
        return new ToastPage<TToken>("<#= info.Layout #>.<#= info.Page #>", token);
      }

<#  } #>
    }
<#   } #>
  }
}

<#+
  struct ViewInfo
  {
    public string Filename;
    public string Page;
    public string Layout;
  }
#>